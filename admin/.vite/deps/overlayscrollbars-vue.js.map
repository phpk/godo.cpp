{
  "version": 3,
  "sources": ["../../node_modules/src/support/cache.ts", "../../node_modules/src/support/compatibility/isBrowser.ts", "../../node_modules/src/support/utils/alias.ts", "../../node_modules/src/support/compatibility/apis.ts", "../../node_modules/src/support/utils/types.ts", "../../node_modules/src/support/utils/animation.ts", "../../node_modules/src/support/utils/array.ts", "../../node_modules/src/support/utils/strings.ts", "../../node_modules/src/support/utils/equal.ts", "../../node_modules/src/support/utils/noop.ts", "../../node_modules/src/support/utils/function.ts", "../../node_modules/src/support/utils/object.ts", "../../node_modules/src/support/utils/math.ts", "../../node_modules/src/support/dom/attribute.ts", "../../node_modules/src/support/dom/class.ts", "../../node_modules/src/support/dom/traversal.ts", "../../node_modules/src/support/dom/manipulation.ts", "../../node_modules/src/support/dom/create.ts", "../../node_modules/src/support/dom/style.ts", "../../node_modules/src/support/dom/dimensions.ts", "../../node_modules/src/support/dom/events.ts", "../../node_modules/src/support/dom/offset.ts", "../../node_modules/src/support/dom/scroll.ts", "../../node_modules/src/support/eventListeners.ts", "../../node_modules/src/options.ts", "../../node_modules/src/classnames.ts", "../../node_modules/src/plugins/plugins.ts", "../../node_modules/src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts", "../../node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts", "../../node_modules/src/setups/structureSetup/structureSetup.utils.ts", "../../node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts", "../../node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts", "../../node_modules/src/environment.ts", "../../node_modules/src/initialization.ts", "../../node_modules/src/instances.ts", "../../node_modules/src/observers/domObserver.ts", "../../node_modules/src/observers/sizeObserver.ts", "../../node_modules/src/observers/trinsicObserver.ts", "../../node_modules/src/setups/observersSetup/observersSetup.ts", "../../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts", "../../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts", "../../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts", "../../node_modules/src/setups/structureSetup/structureSetup.elements.ts", "../../node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts", "../../node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts", "../../node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts", "../../node_modules/src/setups/structureSetup/structureSetup.ts", "../../node_modules/src/setups/setups.ts", "../../node_modules/src/overlayscrollbars.ts", "../../node_modules/src/useOverlayScrollbars.ts", "../../node_modules/src/OverlayScrollbarsComponent.vue"],
  "sourcesContent": ["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n", "export const isBrowser =\r\n  typeof window !== 'undefined' &&\r\n  // deno has the global `window` defined, so additionally check for document\r\n  typeof document !== 'undefined';\r\n", "import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n", "import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n", "import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n", "export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\nexport const strVisible = 'visible';\r\n", "import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n", "export const noop = () => {}; // eslint-disable-line\r\n", "import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n", "import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, value || '');\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => initialArrSet[operation](token));\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (elm: AttributeElementTarget, attrName: string, value: DomTokens) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => {\r\n  (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n", "import type { HTMLElementTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: HTMLElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: HTMLElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: HTMLElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: HTMLElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: string, classNameB: string) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n", "import { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    return elm.matches(selector);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isBodyElement = (elm: InputElementType) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nconst getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport {\r\n  find,\r\n  findFirst,\r\n  is,\r\n  isBodyElement,\r\n  children,\r\n  contents,\r\n  parent,\r\n  liesBetween,\r\n  closest,\r\n  getFocusedElement,\r\n};\r\n", "import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n", "import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n", "import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: HTMLElementTarget, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElementTarget): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n", "import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElementTarget): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.scrollX,\r\n        y: rect.top + wnd.scrollY,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElementTarget): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n", "import type { Env } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { capNumber, isNumber } from '../utils';\r\n\r\nexport type RTLScrollBehavior = Env['_rtlScrollBehavior'] | false | null | undefined;\r\n\r\n/**\r\n * Transforms a normalized scroll position to a RTL compatilbe scroll position value or vice versa (depending on the input format).\r\n * @param scrollPosition The scroll position value.\r\n * @param overflowAmount The (normalized) overflow amount value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position, just converted.\r\n * If the input `scrollPosition` is normalized the raw (RTL Compatible) format is returned.\r\n * If the input `scrollPosition` is raw (RTL Compatible) the normalized format is returned.\r\n */\r\nexport const convertScrollPosition = (\r\n  scrollPosition: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -scrollPosition + 0 // +0 avoids negative zero (-0) as a result\r\n      : rtlScrollBehavior.i\r\n      ? overflowAmount - scrollPosition\r\n      : scrollPosition\r\n    : scrollPosition;\r\n\r\n/**\r\n * Gets the raw (RTL compatilbe) scroll boundaries from the normalized overflow amount.\r\n * @param overflowAmount The normalzed overflow amount value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The raw (RTL compatible) scroll boundaries. (min value will scroll to start (0%) and max will scroll to end (100%))\r\n */\r\nexport const getRawScrollBounds = (\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n): [min: number, max: number] => [\r\n  convertScrollPosition(0, overflowAmount, rtlScrollBehavior),\r\n  convertScrollPosition(overflowAmount, overflowAmount, rtlScrollBehavior),\r\n];\r\n\r\n/**\r\n * Gets the scroll ratio of the current raw (RTL compatilbe) scroll position.\r\n * @param rawScrollPosition The raw (RTL compatible) scroll position.\r\n * @param overflowAmount The normalized overflow amount.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The scroll ratio of the current scroll position 0..1.\r\n */\r\nexport const getRawScrollRatio = (\r\n  rawScrollPosition: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n) =>\r\n  capNumber(\r\n    0,\r\n    1,\r\n    convertScrollPosition(rawScrollPosition, overflowAmount, rtlScrollBehavior) / overflowAmount ||\r\n      0\r\n  );\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n", "import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n", "const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\nexport const dataValueHostHtmlBody = 'body';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n", "import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n", "import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n", "import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n", "import { getStyles, strOverflowX, strOverflowY, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Gets the current overflow state of the viewport.\r\n * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n * @returns A object which contains informations about the current overflow state.\r\n */\r\nexport const getViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  viewportStyleObj?: StyleObject\r\n): ViewportOverflowState => {\r\n  const { _viewport } = structureSetupElements;\r\n  const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n    const overflowStyle = getStyles(_viewport, styleKey);\r\n    // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n    const objectPrefferedOverflowStyle = viewportStyleObj\r\n      ? viewportStyleObj[styleKey]\r\n      : overflowStyle;\r\n    const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n\r\n    return [overflowStyle, overflowScroll] as [\r\n      overflowStyle: OverflowStyle,\r\n      overflowScroll: boolean\r\n    ];\r\n  };\r\n\r\n  const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n  const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n  return {\r\n    _overflowStyle: {\r\n      x: xOverflowStyle,\r\n      y: yOverflowStyle,\r\n    },\r\n    _overflowScroll: {\r\n      x: xOverflowScroll,\r\n      y: yOverflowScroll,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n * @param overflowAmount The overflow amount.\r\n * @param overflow The overflow behavior according to the options.\r\n * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const setViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  hasOverflow: XY<boolean>,\r\n  overflowOption: XY<OverflowBehavior>,\r\n  viewportStyleObj: StyleObject\r\n): ViewportOverflowState => {\r\n  const hasAnyOverflow = hasOverflow.x || hasOverflow.y;\r\n\r\n  const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n    const overflowVisible = overflowIsVisible(behavior);\r\n    const fallbackVisibilityBehavior = overflowVisible && hasAnyOverflow ? 'hidden' : '';\r\n    const overflowVisibleBehavior =\r\n      (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) ||\r\n      fallbackVisibilityBehavior;\r\n\r\n    return [\r\n      hasOverflowAxis && !overflowVisible ? behavior : '',\r\n      overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n    ];\r\n  };\r\n\r\n  const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n  const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n  viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n  viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n  return getViewportOverflowState(structureSetupElements, viewportStyleObj);\r\n};\r\n", "import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  addAttrClass,\r\n  removeAttrClass,\r\n  strWidth,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n} from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { UpdateCache, WH, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean,\r\n          viewportStyleObj: StyleObject\r\n        ): void => {\r\n          assignDeep(viewportStyleObj, {\r\n            [strMarginRight]: 0,\r\n            [strMarginBottom]: 0,\r\n            [strMarginLeft]: 0,\r\n          });\r\n          if (!_viewportIsTarget) {\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(structureSetupElements);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            removeAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                _hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  observersSetupState,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(_viewport, prevStyle);\r\n                addAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: Env,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n", "import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n", "import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n  isBodyElement,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    body: HTMLElement,\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    appendChildren(body, measureElm);\r\n\r\n    const cSize = clientSize(measureElm);\r\n    const oSize = offsetSize(measureElm);\r\n    const fSize = fractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  const getRtlScrollBehavior = (\r\n    parentElm: HTMLElement,\r\n    childElm: HTMLElement\r\n  ): { i: boolean; n: boolean } => {\r\n    setStyles(parentElm, {\r\n      [strOverflowX]: strHidden,\r\n      [strOverflowY]: strHidden,\r\n      direction: 'rtl',\r\n    });\r\n    scrollElementTo(parentElm, { x: 0 });\r\n\r\n    const parentOffset = absoluteCoordinates(parentElm);\r\n    const childOffset = absoluteCoordinates(childElm);\r\n    scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n    const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n    return {\r\n      /**\r\n       * origin direction = determines if the zero scroll position is on the left or right side\r\n       * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n       * true = on the left side\r\n       * false = on the right side\r\n       */\r\n      i: parentOffset.x === childOffset.x,\r\n      /**\r\n       * negative = determines if the maximum scroll is positive or negative\r\n       * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n       * true = negative\r\n       * false = positive\r\n       */\r\n      n: childOffset.x !== childOffsetAfterScroll.x,\r\n    };\r\n  };\r\n\r\n  const { body } = document;\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n", "import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n", "import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n", "import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue =\r\n          (isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '')) || null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  convertScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: convertScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n", "import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n", "import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttrs,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n  getAttr,\r\n  setAttrs,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const hasOver = _viewportHasClass(dataValueViewportOverflowVisible);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating, true);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, hasOver);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating);\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirectionWhenViewportIsTarget = (updateHints: ObserversSetupUpdateHints) => {\r\n    if (_viewportIsTarget) {\r\n      const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n      assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n      assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n      prevDirectionIsRTL = newDirectionIsRTL;\r\n    }\r\n  };\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const { _addResizeListener } = env;\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n", "import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getRawScrollBounds,\r\n  getRawScrollRatio,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { RTLScrollBehavior } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _rtlScrollBehavior } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal?: boolean,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean,\r\n    rtlScrollBehavior?: RTLScrollBehavior\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (\r\n      (1 / lengthRatio) *\r\n        (1 - lengthRatio) *\r\n        (rtlScrollBehavior ? 1 - scrollPercent : scrollPercent) || 0\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean | RTLScrollBehavior\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _overflowAmount } = structureSetupState;\r\n    const overflowAmount = isHorizontal ? _overflowAmount.x : _overflowAmount.y;\r\n    const getTransformValue = (\r\n      structure: ScrollbarStructure,\r\n      rawScrollPosition: number,\r\n      rtlScrollBehavior: RTLScrollBehavior\r\n    ) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            structure,\r\n            getRawScrollRatio(rawScrollPosition, overflowAmount, rtlScrollBehavior),\r\n            isHorizontal,\r\n            rtlScrollBehavior\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const rtlScrollBehavior =\r\n          isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior;\r\n\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: getRawScrollBounds(overflowAmount, rtlScrollBehavior).map((bound) =>\r\n                getTransformValue(structure, bound, rtlScrollBehavior)\r\n              ),\r\n            },\r\n            rtlScrollBehavior\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      const scroll = getElmentScroll(_scrollOffsetElement);\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTransformValue(\r\n              structure,\r\n              isHorizontal ? scroll.x : scroll.y,\r\n              isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior\r\n            ),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount } = structureSetupState;\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (\r\n              timeline: AnimationTimeline,\r\n              overflowAmount: number,\r\n              isHorizontal?: boolean\r\n            ) => {\r\n              const rtlScrollBehavior =\r\n                isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior;\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                timeline,\r\n                addDirectionRTLKeyframes(\r\n                  {\r\n                    transform: getRawScrollBounds(overflowAmount - cushion, rtlScrollBehavior).map(\r\n                      (bound) => getTrasformTranslateValue(numberToCssPx(bound), isHorizontal)\r\n                    ),\r\n                  },\r\n                  rtlScrollBehavior\r\n                ),\r\n                'add'\r\n              );\r\n            };\r\n\r\n            setScrollbarElementAnimation(scrollTimelineX, _overflowAmount.x, true);\r\n            setScrollbarElementAnimation(scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scroll = getElmentScroll(_scrollOffsetElement);\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScroll: number,\r\n            axisOverflowAmount: number,\r\n            rtlScrollBehavior?: RTLScrollBehavior\r\n          ) => {\r\n            const percent = getRawScrollRatio(axisScroll, axisOverflowAmount, rtlScrollBehavior);\r\n            const px = axisOverflowAmount * percent;\r\n            return numberToCssPx(rtlScrollBehavior ? -px : px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            {\r\n              transform: elm\r\n                ? getTrasformTranslateValue({\r\n                    x: getTranslateValue(\r\n                      scroll.x,\r\n                      _overflowAmount.x,\r\n                      getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior\r\n                    ),\r\n                    y: getTranslateValue(scroll.y, _overflowAmount.y),\r\n                  })\r\n                : '',\r\n            },\r\n          ] as [HTMLElement | false, StyleObject];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n", "import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  addAttrClass,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _viewport, _viewportIsTarget, _scrollOffsetElement, _documentElm } =\r\n    structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top';\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const removeAttrClass = addAttrClass(\r\n            _host,\r\n            dataAttributeHost,\r\n            dataValueHostScrollbarPressed\r\n          );\r\n\r\n          const offFns = [\r\n            removeAttrClass,\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(() => {\r\n              _viewport.focus();\r\n            }, 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // when the handle has a size transition, update the handle offset each frame for the time of the transition\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n", "import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes('scroll') &&\r\n          (visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll'));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n", "import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  noop,\r\n  stopPropagation,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataValueHostHtmlBody,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const focusElm = (customActiveElm: Element | null) => {\r\n    if (customActiveElm && (customActiveElm as HTMLElement).focus) {\r\n      (customActiveElm as HTMLElement).focus();\r\n    }\r\n  };\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement = elementIsGenerated(viewportElement)\r\n    ? targetElement\r\n    : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elm && !elementIsGenerated(elm)\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement?: Element | null) =>\r\n      activeElement\r\n        ? addEventListener(\r\n            activeElement,\r\n            'focusin focusout focus blur',\r\n            (event) => {\r\n              stopPropagation(event);\r\n              event.stopImmediatePropagation();\r\n            },\r\n            {\r\n              _capture: true,\r\n              _passive: false,\r\n            }\r\n          )\r\n        : noop;\r\n    const tabIndexStr = 'tabindex';\r\n    const ogTabindex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, dataAttributeViewport, '');\r\n      setAttrs(_viewport, tabIndexStr, ogTabindex || '-1');\r\n      isBody && addAttrClass(docElement, dataAttributeHost, dataValueHostHtmlBody);\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyActiveElm);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, [\r\n          dataAttributeHostOverflowX,\r\n          dataAttributeHostOverflowY,\r\n          dataAttributeViewport,\r\n        ]);\r\n        ogTabindex\r\n          ? setAttrs(_viewport, tabIndexStr, ogTabindex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        elementIsGenerated(_viewport) && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElm(destroyActiveElm);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // focus viewport if previously focused element was target, otherwise focus previously focused element\r\n    focusElm(\r\n      !viewportIsTarget && docWnd.top === docWnd && initActiveElm === targetElement\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n", "import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n", "import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n", "import {\r\n  createCache,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport type { ViewportOverflowState } from '../structureSetup.utils';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n  overflowIsVisible,\r\n  setViewportOverflowState,\r\n} from '../structureSetup.utils';\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(dataValueViewportOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = _undoViewportArrange\r\n        ? _undoViewportArrange(preMeasureViewportOverflowState)\r\n        : [];\r\n\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      const arrangedViewportScrollSize = viewportScrollSize;\r\n      const arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        _arrangeViewport &&\r\n        _arrangeViewport(undoViewportArrangeOverflowState, viewportScrollSize, sizeFraction)\r\n      ) {\r\n        // arrangedViewportClientSize = clientSize(_viewport);\r\n        // arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {};\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        structureSetupElements,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n\r\n      _hideNativeScrollbars &&\r\n        _hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _observersState,\r\n          !!_arrangeViewport &&\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction),\r\n          viewportStyle\r\n        );\r\n\r\n      if (_viewportIsTarget) {\r\n        setAttrs(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        setAttrs(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    addRemoveAttrClass(\r\n      _padding,\r\n      dataAttributePadding,\r\n      dataValuePaddingOverflowVisible,\r\n      removeClipping\r\n    );\r\n    if (!_viewportIsTarget) {\r\n      addRemoveAttrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(structureSetupElements)._overflowStyle\r\n    );\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n", "import { getEnvironment } from '~/environment';\r\nimport {\r\n  addAttrClass,\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataAttributeHost, dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      const removeAttrClass = _viewportIsTarget\r\n        ? addAttrClass(_viewport, dataAttributeHost, dataValueHostUpdating)\r\n        : noop;\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      removeAttrClass();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _viewport } = structureSetupElements;\r\n      const initialScroll = getElmentScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n", "import { onUnmounted, shallowRef, unref, watch } from 'vue';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { Ref, UnwrapRef } from 'vue';\r\nimport type { InitializationTarget } from 'overlayscrollbars';\r\nimport type {\r\n  OverlayScrollbarsComponentProps,\r\n  OverlayScrollbarsComponentRef,\r\n} from './OverlayScrollbarsComponent.types';\r\n\r\ntype Defer = [\r\n  requestDefer: (callback: () => any, options?: OverlayScrollbarsComponentProps['defer']) => void,\r\n  cancelDefer: () => void\r\n];\r\n\r\nexport interface UseOverlayScrollbarsParams {\r\n  /** OverlayScrollbars options. */\r\n  options?:\r\n    | OverlayScrollbarsComponentProps['options']\r\n    | Ref<OverlayScrollbarsComponentProps['options']>;\r\n  /** OverlayScrollbars events. */\r\n  events?:\r\n    | OverlayScrollbarsComponentProps['events']\r\n    | Ref<OverlayScrollbarsComponentProps['events']>;\r\n  /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n  defer?: OverlayScrollbarsComponentProps['defer'] | Ref<OverlayScrollbarsComponentProps['defer']>;\r\n}\r\n\r\nexport type UseOverlayScrollbarsInitialization = (target: InitializationTarget) => void;\r\n\r\nexport type UseOverlayScrollbarsInstance = () => ReturnType<\r\n  OverlayScrollbarsComponentRef['osInstance']\r\n>;\r\n\r\nconst createDefer = (): Defer => {\r\n  /* c8 ignore start */\r\n  if (typeof window === 'undefined') {\r\n    // mock ssr calls with \"noop\"\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noop = () => {};\r\n    return [noop, noop];\r\n  }\r\n  /* c8 ignore end */\r\n\r\n  let idleId: number;\r\n  let rafId: number;\r\n  const wnd = window;\r\n  const idleSupported = typeof wnd.requestIdleCallback === 'function';\r\n  const rAF = wnd.requestAnimationFrame;\r\n  const cAF = wnd.cancelAnimationFrame;\r\n  const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;\r\n  const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;\r\n  const clear = () => {\r\n    cIdle(idleId);\r\n    cAF(rafId);\r\n  };\r\n\r\n  return [\r\n    (callback, options) => {\r\n      clear();\r\n      idleId = rIdle(\r\n        idleSupported\r\n          ? () => {\r\n              clear();\r\n              // inside idle its best practice to use rAF to change DOM for best performance\r\n              rafId = rAF(callback);\r\n            }\r\n          : callback,\r\n        typeof options === 'object' ? options : { timeout: 2233 }\r\n      );\r\n    },\r\n    clear,\r\n  ];\r\n};\r\n\r\n/**\r\n * Composable for advanced usage of OverlayScrollbars. (When the OverlayScrollbarsComponent is not enough)\r\n * @param params Parameters for customization.\r\n * @returns A tuple with two values:\r\n * The first value is the initialization function, it takes one argument which is the `InitializationTarget` and returns the OverlayScrollbars instance.\r\n * The second value is a function which returns the current OverlayScrollbars instance or `null` if not initialized.\r\n */\r\nexport const useOverlayScrollbars = (\r\n  params?: UseOverlayScrollbarsParams | Ref<UseOverlayScrollbarsParams | undefined>\r\n): [UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance] => {\r\n  let instance: ReturnType<UseOverlayScrollbarsInstance> = null;\r\n  let options: UnwrapRef<UseOverlayScrollbarsParams['options']>;\r\n  let events: UnwrapRef<UseOverlayScrollbarsParams['events']>;\r\n  let defer: UnwrapRef<UseOverlayScrollbarsParams['defer']>;\r\n  const paramsRef = shallowRef(params || {});\r\n  const [requestDefer, clearDefer] = createDefer();\r\n\r\n  watch(\r\n    () => unref(paramsRef.value?.defer),\r\n    (currDefer) => {\r\n      defer = currDefer;\r\n    },\r\n    { deep: true, immediate: true }\r\n  );\r\n\r\n  watch(\r\n    () => unref(paramsRef.value?.options),\r\n    (currOptions) => {\r\n      options = currOptions;\r\n\r\n      if (OverlayScrollbars.valid(instance)) {\r\n        instance.options(options || {}, true);\r\n      }\r\n    },\r\n    { deep: true, immediate: true }\r\n  );\r\n\r\n  watch(\r\n    () => unref(paramsRef.value?.events),\r\n    (currEvents) => {\r\n      events = currEvents;\r\n\r\n      if (OverlayScrollbars.valid(instance)) {\r\n        instance.on(\r\n          /* c8 ignore next */\r\n          events || {},\r\n          true\r\n        );\r\n      }\r\n    },\r\n    { deep: true, immediate: true }\r\n  );\r\n\r\n  onUnmounted(() => {\r\n    clearDefer();\r\n    instance?.destroy();\r\n  });\r\n\r\n  return [\r\n    (target) => {\r\n      // if already initialized do nothing\r\n      if (OverlayScrollbars.valid(instance)) {\r\n        return instance;\r\n      }\r\n\r\n      const init = () => (instance = OverlayScrollbars(target, options || {}, events || {}));\r\n\r\n      if (defer) {\r\n        requestDefer(init, defer);\r\n      } else {\r\n        init();\r\n      }\r\n    },\r\n    () => instance,\r\n  ];\r\n};\r\n", "<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  unref,\r\n  shallowRef,\r\n  toRefs,\r\n  watch,\r\n  watchPostEffect,\r\n  onMounted,\r\n  type PropType,\r\n} from 'vue';\r\nimport { useOverlayScrollbars } from './useOverlayScrollbars';\r\nimport type {\r\n  OverlayScrollbarsComponentProps,\r\n  OverlayScrollbarsComponentRef,\r\n} from './OverlayScrollbarsComponent.types';\r\nimport type { EventListeners, EventListenerArgs } from 'overlayscrollbars';\r\n\r\ntype EmitEventsMap = {\r\n  [N in keyof EventListenerArgs]: `os${Capitalize<N>}`;\r\n};\r\n\r\nconst emitEvents: EmitEventsMap = {\r\n  initialized: 'osInitialized',\r\n  updated: 'osUpdated',\r\n  destroyed: 'osDestroyed',\r\n  scroll: 'osScroll',\r\n};\r\nconst props = defineProps({\r\n  element: {\r\n    type: [String, Object] as PropType<Required<OverlayScrollbarsComponentProps>['element']>,\r\n    default: 'div',\r\n  },\r\n  options: { type: Object as PropType<OverlayScrollbarsComponentProps['options']> },\r\n  events: { type: Object as PropType<OverlayScrollbarsComponentProps['events']> },\r\n  defer: { type: [Boolean, Object] as PropType<OverlayScrollbarsComponentProps['defer']> },\r\n});\r\nconst emits = defineEmits<{\r\n  (name: 'osInitialized', ...args: EventListenerArgs['initialized']): void;\r\n  (name: 'osUpdated', ...args: EventListenerArgs['updated']): void;\r\n  (name: 'osDestroyed', ...args: EventListenerArgs['destroyed']): void;\r\n  (name: 'osScroll', ...args: EventListenerArgs['scroll']): void;\r\n}>();\r\n\r\nconst { element, options, events, defer } = toRefs(props);\r\nconst elementRef = shallowRef<HTMLElement | null>(null);\r\nconst slotRef = shallowRef<HTMLElement | null>(null);\r\nconst combinedEvents = ref<EventListeners>();\r\nconst [initialize, osInstance] = useOverlayScrollbars({ options, events: combinedEvents, defer });\r\n\r\nconst exposed: OverlayScrollbarsComponentRef = {\r\n  osInstance,\r\n  getElement: () => elementRef.value,\r\n};\r\n\r\ndefineExpose(exposed);\r\n\r\nwatchPostEffect((onCleanup) => {\r\n  const { value: target } = elementRef;\r\n  const { value: contentsElm } = slotRef;\r\n\r\n  /* c8 ignore start */\r\n  if (!target) {\r\n    return;\r\n  }\r\n  /* c8 ignore end */\r\n\r\n  initialize(\r\n    element.value === 'body'\r\n      ? {\r\n          target,\r\n          cancel: {\r\n            body: null,\r\n          },\r\n        }\r\n      : {\r\n          target,\r\n          elements: {\r\n            viewport: contentsElm,\r\n            content: contentsElm,\r\n          },\r\n        }\r\n  );\r\n\r\n  onCleanup(() => osInstance()?.destroy());\r\n});\r\n\r\nwatch(\r\n  () => unref(events),\r\n  (rawCurrEvents) => {\r\n    const currEvents = rawCurrEvents || {};\r\n    combinedEvents.value = (\r\n      Object.keys(emitEvents) as (keyof EventListeners)[]\r\n    ).reduce<EventListeners>(<N extends keyof EventListeners>(obj: EventListeners, name: N) => {\r\n      const eventListener = currEvents[name];\r\n      obj[name] = [\r\n        (...args: EventListenerArgs[N]) =>\r\n          emits(\r\n            emitEvents[name],\r\n            // @ts-ignore\r\n            ...args\r\n          ),\r\n        ...(Array.isArray(eventListener) ? eventListener : [eventListener]).filter(Boolean),\r\n      ];\r\n      return obj;\r\n    }, {});\r\n  },\r\n  { deep: true, immediate: true }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <component data-overlayscrollbars-initialize=\"\" :is=\"element\" ref=\"elementRef\">\r\n    <slot v-if=\"element === 'body'\"></slot>\r\n    <div v-else data-overlayscrollbars-contents=\"\" ref=\"slotRef\">\r\n      <slot></slot>\r\n    </div>\r\n  </component>\r\n</template>\r\n"],
  "mappings": "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",
  "names": ["createCache", "options", "update", "o", "_initialValue", "u", "_equal", "_", "_alwaysUpdateValues", "_value", "_previous", "cacheUpdateContextual", "newValue", "force", "curr", "newVal", "changed", "cacheUpdateIsolated", "getCurrentCache", "isBrowser", "window", "document", "wnd", "mathMax", "Math", "max", "mathMin", "min", "mathRound", "round", "mathAbs", "abs", "cAF", "cancelAnimationFrame", "rAF", "requestAnimationFrame", "setT", "setTimeout", "clearT", "clearTimeout", "getApi", "name", "MutationObserverConstructor", "IntersectionObserverConstructor", "ResizeObserverConstructor", "scrollT", "ElementNodeType", "Node", "ELEMENT_NODE", "toString", "hasOwnProperty", "Object", "prototype", "typeRgx", "isUndefined", "obj", "isNull", "type", "call", "replace", "toLowerCase", "isNumber", "isString", "isBoolean", "isFunction", "isArray", "Array", "isObject", "isArrayLike", "length", "lengthCorrectFormat", "isPlainObject", "key", "cstr", "ctor", "ctorProto", "hasOwnConstructor", "hasIsPrototypeOf", "isHTMLElement", "instanceofObj", "HTMLElement", "nodeType", "isElement", "Element", "animationCurrentTime", "performance", "now", "animateNumber", "from", "to", "duration", "onFrame", "easing", "animationFrameId", "timeStart", "finalDuration", "frame", "complete", "timeNow", "timeElapsed", "stopAnimation", "percent", "progress", "animationCompleted", "each", "source", "callback", "i", "keys", "inArray", "arr", "item", "indexOf", "concat", "a", "b", "push", "array", "items", "arrayIsSingleItem", "apply", "createOrKeepArray", "value", "isEmptyArray", "deduplicateArray", "Set", "runEachAndClear", "args", "keep", "runFn", "fn", "strPaddingTop", "strPaddingRight", "strPaddingLeft", "strPaddingBottom", "strMarginLeft", "strMarginRight", "strMarginBottom", "strOverflowX", "strOverflowY", "strWidth", "strHeight", "strHidden", "strVisible", "equal", "props", "propMutation", "result", "prop", "compareA", "compareB", "equalWH", "equalXY", "equalTRBL", "noop", "bind", "selfClearTimeout", "timeout", "id", "setTFn", "clearTFn", "debounce", "functionToDebounce", "maxTimeoutId", "prevArguments", "latestArguments", "clear", "v", "_timeout", "p", "_maxDelay", "S", "_mergeParams", "invokeFunctionToDebounce", "this", "mergeParms", "flush", "debouncedFn", "arguments", "finalTimeout", "hasTimeout", "finalMaxWait", "hasMaxWait", "setTimeoutFn", "clearTimeoutFn", "mergeParamsResult", "invokedArgs", "boundInvoke", "timeoutId", "_flush", "assignDeep", "target", "object1", "object2", "object3", "object4", "object5", "object6", "sources", "copy", "copyIsArray", "src", "clone", "slice", "removeUndefinedProperties", "deep", "undefined", "isEmptyObject", "capNumber", "number", "getDomTokensArray", "tokens", "split", "filter", "token", "getAttr", "elm", "attrName", "getAttribute", "hasAttr", "hasAttribute", "setAttrs", "attrNames", "setAttribute", "removeAttrs", "removeAttribute", "domTokenListAttr", "initialArr", "setElmAttr", "domTokenListOperation", "operationTokens", "operation", "initialArrSet", "join", "_remove", "removeTokens", "_add", "addTokens", "_has", "hasTokens", "tokenSet", "reduce", "boolean", "includes", "removeAttrClass", "addAttrClass", "addRemoveAttrClass", "add", "hasAttrClass", "createDomTokenListClass", "removeClass", "className", "addClass", "find", "selector", "rootElm", "querySelectorAll", "findFirst", "querySelector", "is", "matches", "isBodyElement", "contents", "childNodes", "parent", "parentElement", "closest", "getFocusedElement", "doc", "activeElement", "liesBetween", "highBoundarySelector", "deepBoundarySelector", "closestHighBoundaryElm", "closestDeepBoundaryElm", "deepBoundaryIsValid", "removeElements", "nodes", "e", "parentElm", "removeChild", "before", "preferredAnchor", "insertedElms", "anchor", "fragment", "createDocumentFragment", "insertedElm", "previousSibling", "appendChild", "firstChild", "nextSibling", "insertBefore", "appendChildren", "node", "children", "insertAfter", "insertedNodes", "createDiv", "classNames", "div", "createElement", "createDOM", "html", "createdDiv", "innerHTML", "trim", "customCssPropRegex", "getCSSVal", "computedStyle", "getPropertyValue", "validFiniteNumber", "notNaN", "isFinite", "parseToZeroOrNumber", "parseFloat", "ratioToCssPercent", "ratio", "toFixed", "numberToCssPx", "setStyles", "styles", "rawValue", "elmStyle", "style", "test", "setProperty", "_unused", "getStyles", "pseudoElm", "getSingleStyle", "getStylesResult", "getComputedStyle", "getDirectionIsRTL", "topRightBottomLeft", "propertyPrefix", "propertySuffix", "finalPrefix", "finalSuffix", "top", "right", "bottom", "left", "t", "r", "l", "getTrasformTranslateValue", "isHorizontal", "x", "y", "zeroObj", "w", "h", "getElmWidthHeightProperty", "property", "windowSize", "customWnd", "offsetSize", "clientSize", "scrollSize", "fractionalSize", "cssWidth", "cssHeight", "getBoundingClientRect", "domRectHasDimensions", "rect", "domRectAppeared", "currContentRect", "prevContentRect", "rectHasDimensions", "rectHadDimensions", "removeEventListener", "eventNames", "listener", "capture", "eventName", "addEventListener", "_ref", "passive", "_passive", "_capture", "once", "_once", "nativeOptions", "map", "finalListener", "evt", "stopPropagation", "preventDefault", "absoluteCoordinates", "scrollX", "scrollY", "convertScrollPosition", "scrollPosition", "overflowAmount", "rtlScrollBehavior", "n", "getRawScrollBounds", "getRawScrollRatio", "rawScrollPosition", "scrollElementTo", "position", "scrollLeft", "scrollTop", "getElmentScroll", "manageListener", "createEventListenerHub", "initialEventListeners", "events", "Map", "removeEvent", "eventSet", "get", "currListener", "forEach", "addEvent", "nameOrEventListeners", "listenerOrPure", "set", "eventListenerKeys", "offFns", "eventListener", "triggerEvent", "event", "opsStringify", "JSON", "stringify", "val", "getPropByPath", "path", "defaultOptions", "paddingAbsolute", "showNativeOverlaidScrollbars", "elementEvents", "attributes", "ignoreMutation", "overflow", "scrollbars", "theme", "visibility", "autoHide", "autoHideDelay", "autoHideSuspend", "dragScroll", "clickScroll", "pointers", "getOptionsDiff", "currOptions", "newOptions", "diff", "optionsKeys", "optionKey", "currOptionValue", "newOptionValue", "isDiff", "createOptionCheck", "changedOptions", "dataAttributePrefix", "classNameEnvironment", "classNameEnvironmentScrollbarHidden", "dataAttributeInitialize", "dataAttributeHost", "dataAttributeHostOverflowX", "dataAttributeHostOverflowY", "dataValueHostOverflowVisible", "dataValueHostScrollbarPressed", "dataValueHostUpdating", "dataValueHostHtmlBody", "dataAttributeViewport", "dataValueViewportArrange", "dataValueViewportScrollbarHidden", "dataValueViewportOverflowVisible", "dataAttributePadding", "dataValuePaddingOverflowVisible", "dataAttributeContent", "classNameSizeObserver", "classNameSizeObserverAppear", "classNameSizeObserverListener", "classNameSizeObserverListenerScroll", "classNameSizeObserverListenerItem", "classNameSizeObserverListenerItemFinal", "classNameTrinsicObserver", "classNameScrollbarThemeNone", "classNameScrollbar", "classNameScrollbarRtl", "classNameScrollbarHorizontal", "classNameScrollbarVertical", "classNameScrollbarTrack", "classNameScrollbarHandle", "classNameScrollbarVisible", "classNameScrollbarCornerless", "classNameScrollbarInteraction", "classNameScrollbarUnusable", "classNameScrollbarAutoHide", "classNameScrollbarAutoHideHidden", "classNameScrollbarWheel", "classNameScrollbarTrackInteractive", "classNameScrollbarHandleInteractive", "pluginModules", "staticPluginModuleInstances", "addPlugins", "addedPlugin", "plugin", "registerPluginModuleInstances", "staticObj", "instanceInfo", "static", "osStatic", "instance", "osInstance", "instanceObj", "instancePluginMap", "getStaticPluginModuleInstance", "pluginModuleName", "optionsValidationPluginModuleName", "sizeObserverPluginName", "SizeObserverPlugin", "listenerElement", "onSizeChangedCallback", "observeAppearChange", "scrollAmount", "scrollEventName", "observerElementChildren", "observerElementChildrenRoot", "shrinkElement", "lastChild", "expandElement", "expandElementChild", "cacheSize", "currSize", "isDirty", "rAFId", "reset", "onResized", "appear", "onScroll", "scrollEvent", "destroyFns", "getShowNativeOverlaidScrollbars", "checkOption", "env", "T", "_nativeScrollbarsOverlaid", "showNativeOverlaidScrollbarsOption", "showNativeOverlaidScrollbarsChanged", "overflowIsVisible", "overflowBehavior", "getViewportOverflowState", "structureSetupElements", "viewportStyleObj", "D", "_viewport", "getStatePerAxis", "styleKey", "overflowStyle", "objectPrefferedOverflowStyle", "overflowScroll", "xOverflowStyle", "xOverflowScroll", "yOverflowStyle", "yOverflowScroll", "_overflowStyle", "_overflowScroll", "setViewportOverflowState", "hasOverflow", "overflowOption", "hasAnyOverflow", "setAxisOverflowStyle", "behavior", "hasOverflowAxis", "overflowVisible", "fallbackVisibilityBehavior", "overflowVisibleBehavior", "overflowX", "visibleBehaviorX", "overflowY", "visibleBehaviorY", "scrollbarsHidingPluginName", "ScrollbarsHidingPlugin", "_viewportArrangement", "structureSetupState", "observersSetupState", "checkOptions", "V", "_viewportIsTarget", "L", "_nativeScrollbarsHiding", "P", "_nativeScrollbarsSize", "doViewportArrange", "_getViewportOverflowHideOffset", "viewportOverflowState", "R", "arrangeHideOffset", "getHideOffsetPerAxis", "isOverlaid", "nativeScrollbarSize", "nonScrollbarStylingHideOffset", "scrollbarsHideOffset", "scrollbarsHideOffsetArrange", "xScrollbarsHideOffset", "xScrollbarsHideOffsetArrange", "yScrollbarsHideOffset", "yScrollbarsHideOffsetArrange", "_scrollbarsHideOffset", "_scrollbarsHideOffsetArrange", "_hideNativeScrollbars", "_directionIsRTL", "viewportArrange", "U", "B", "arrangeX", "arrangeY", "hideOffsetX", "hideOffsetY", "j", "_viewportPaddingStyle", "horizontalMarginKey", "viewportHorizontalPaddingKey", "horizontalMarginValue", "verticalMarginValue", "horizontalPaddingValue", "verticalPaddingValue", "_arrangeViewport", "viewportScrollSize", "sizeFraction", "N", "viewportArrangeHorizontalPaddingKey", "viewportArrangeHorizontalPaddingValue", "viewportArrangeVerticalPaddingValue", "paddingTop", "fractionalContentWidth", "fractionalContenHeight", "arrangeSize", "_undoViewportArrange", "finalViewportOverflowState", "viewportPaddingStyle", "finalPaddingStyle", "assignProps", "prevStyle", "_envWindowZoom", "size", "dpr", "getWindowDPR", "screen", "dDPI", "deviceXDPI", "sDPI", "logicalXDPI", "devicePixelRatio", "diffBiggerThanOne", "valOne", "valTwo", "absValOne", "absValTwo", "envInstance", "updateNativeScrollbarSizeCache", "sizeNew", "deltaSize", "deltaAbsSize", "deltaAbsRatio", "dprNew", "deltaIsBigger", "difference", "dprChanged", "isZoom", "scrollbarSizeChanged", "scrollbarSize", "clickScrollPluginModuleName", "ClickScrollPlugin", "moveHandleRelative", "getHandleOffset", "startOffset", "handleLength", "relativeTrackPointerOffset", "iteration", "animateClickScroll", "clickScrollProgress", "sign", "animationProgress", "handleStartBound", "handleEndBound", "mouseBetweenHandleBounds", "firstIterationPauseTimeout", "environmentInstance", "createEnvironment", "getNativeScrollbarSize", "body", "measureElm", "measureElmChild", "cSize", "oSize", "fSize", "getNativeScrollbarsHiding", "testElm", "revertClass", "getRtlScrollBehavior", "childElm", "direction", "parentOffset", "childOffset", "childOffsetAfterScroll", "envStyle", "envDOM", "envElm", "envChildElm", "getNativeScrollbarSizeCache", "nativeScrollbarsSize", "nativeScrollbarsHiding", "nativeScrollbarsOverlaid", "staticDefaultInitialization", "elements", "host", "padding", "viewport", "content", "slot", "cancel", "staticDefaultOptions", "getDefaultOptions", "getDefaultInitialization", "_scrollTimeline", "_rtlScrollBehavior", "_addResizeListener", "_getDefaultInitialization", "_setDefaultInitialization", "newInitializationStrategy", "_getDefaultOptions", "_setDefaultOptions", "newDefaultOptions", "_staticDefaultInitialization", "_staticDefaultOptions", "scrollbarsHidingPlugin", "zoomFn", "getEnvironment", "resolveInitialization", "staticInitializationElement", "fallbackStaticInitializationElement", "defaultStaticInitializationElement", "staticInitializationElementValue", "staticInitialization", "resolvedInitialization", "dynamicInitializationElement", "fallbackDynamicInitializationElement", "defaultDynamicInitializationElement", "dynamicInitializationElementValue", "dynamicInitialization", "cancelInitialization", "isBody", "cancelInitializationValue", "G", "defaultNativeScrollbarsOverlaid", "defaultbody", "resolvedNativeScrollbarsOverlaid", "resolvedDocumentScrollingElement", "finalNativeScrollbarsOverlaid", "finalDocumentScrollingElement", "targetInstanceMap", "WeakMap", "addInstance", "removeInstance", "delete", "getInstance", "createEventContentChange", "eventContentChange", "destroyed", "destroy", "updateElements", "getElements", "eventElmList", "entries", "isTargetChild", "contains", "removeListener", "createDOMObserver", "isContentObserver", "isConnected", "ct", "_attributes", "rt", "_styleChangingAttributes", "lt", "_eventContentChange", "it", "_nestedTargetSelector", "ut", "_ignoreTargetChange", "dt", "_ignoreContentChange", "debouncedEventContentChange", "destroyEventContentChange", "updateEventContentChangeElements", "finalAttributes", "finalStyleChangingAttributes", "observedAttributes", "observerCallback", "fromRecords", "mutations", "ignoreTargetChange", "ignoreContentChange", "totalChangedNodes", "targetChangedAttrs", "targetStyleChanged", "contentChanged", "mutation", "attributeName", "mutationTarget", "oldValue", "addedNodes", "removedNodes", "isAttributesType", "isChildListType", "targetIsMutationTarget", "isAttrChange", "attributeValue", "attributeChanged", "styleChangingAttrChanged", "contentAttrChanged", "isNestedTarget", "baseAssertion", "contentFinalChanged", "mutationObserver", "observe", "attributeOldValue", "attributeFilter", "subtree", "childList", "characterData", "disconnect", "takeRecords", "createSizeObserver", "_direction", "observeDirectionChange", "_appear", "sizeObserverPlugin", "getIsDirectionRTL", "updateResizeObserverContentRectCache", "baseElements", "sizeObserver", "onSizeChangedCallbackProxy", "sizeChangedContext", "isResizeObserverCall", "ResizeObserverEntry", "hasDirectionCache", "skip", "doDirectionScroll", "currRContentRect", "contentRect", "hasDimensions", "appeared", "firstCall", "rtl", "_directionIsRTLCache", "_sizeChanged", "resizeObserverInstance", "pop", "pluginAppearCallback", "pluginDestroyFns", "updateDirectionIsRTLCache", "directionIsRTLCacheValues", "directionIsRTLCache", "directionIsRTLCacheChanged", "directionIsRTLCachePrevious", "createTrinsicObserver", "onTrinsicChangedCallback", "intersectionObserverInstance", "isHeightIntrinsic", "ioEntryOrSize", "isIntersecting", "intersectionRatio", "trinsicObserver", "updateHeightIntrinsicCache", "triggerOnTrinsicChangedCallback", "updateValue", "heightIntrinsic", "heightIntrinsicChanged", "intersectionObserverCallback", "root", "onSizeChanged", "newSize", "createObserversSetup", "getCurrentOption", "onObserversUpdated", "debounceTimeout", "debounceMaxDelay", "updateContentMutationObserver", "destroyContentMutationObserver", "prevDirectionIsRTL", "hostSelector", "viewportSelector", "viewportAttrsFromTarget", "baseStyleChangingAttrsTextarea", "baseStyleChangingAttrs", "gt", "_target", "bt", "_host", "wt", "_content", "yt", "_isTextarea", "St", "_viewportHasClass", "$t", "_viewportAddRemoveClass", "state", "_heightIntrinsic", "updateContentSizeCache", "hasOver", "isArranged", "scrollOffset", "redoViewportArrange", "contentScroll", "viewportScroll", "fractional", "contentMutationObserverAttr", "onObserversUpdatedDebounced", "prev", "prevObj", "currObj", "setDirectionWhenViewportIsTarget", "updateHints", "newDirectionIsRTL", "_directionChanged", "updateViewportAttrsFromHost", "attribute", "hostAttr", "onTrinsicChanged", "heightIntrinsicCache", "_heightIntrinsicChanged", "exclusiveSizeChange", "updateFn", "directionIsRTL", "directionIsRTLChanged", "onContentMutation", "contentChangedThroughEvent", "_contentMutation", "onHostMutation", "_hostMutation", "Z", "constructTrinsicObserver", "updateTrinsicObserver", "constructSizeObserver", "constructHostMutationObserver", "updateHostMutationObserver", "viewportIsTargetResizeObserver", "destroySizeObserver", "destroyTrinsicObserver", "destroyHostMutationObserver", "removeResizeListener", "_scrollbarSizeChanged", "_checkOption", "_takeRecords", "_force", "attributesChanged", "elementEventsChanged", "debounceValue", "debounceChanged", "contentMutationObserverChanged", "ignoreMutationFromOptions", "construct", "ignore", "maxWait", "hostUpdateResult", "trinsicUpdateResult", "contentUpdateResult", "createScrollbarsSetupElements", "scrollbarsSetupEvents", "K", "defaultInitScrollbars", "defaultInitScrollbarsSlot", "Dt", "_targetIsElm", "kt", "_scrollOffsetElement", "Rt", "_isBody", "scrollbarsInit", "initScrollbarsSlot", "elementAnimations", "initScrollTimeline", "axis", "scrollTimelineX", "scrollTimelineY", "evaluatedScrollbarSlot", "generalDynamicInitializationElement", "getScrollbarHandleLengthRatio", "scrollbarStructure", "Mt", "_track", "Vt", "_handle", "handleSize", "trackSize", "Lt", "_overflowAmount", "Pt", "_overflowEdge", "viewportSize", "getScrollbarHandleOffsetRatio", "scrollPercent", "lengthRatio", "addDirectionRTLKeyframes", "keyframes", "directionRTL", "cancelElementAnimations", "currAnimations", "element", "doCancel", "animation", "setElementAnimation", "timeline", "composite", "activeAnimations", "activeAnimation", "effect", "KeyframeEffect", "animate", "scrollbarStructureAddRemoveClass", "scrollbarStructures", "action", "_scrollbar", "scrollbarStyle", "scrollbarStructureRefreshHandleLength", "structure", "scrollbarStructureRefreshHandleOffset", "getTransformValue", "Ut", "transform", "bound", "scroll", "doRefreshScrollbarOffset", "scrollbar", "horizontalScrollbars", "verticalScrollbars", "scrollbarsAddRemoveClass", "onlyHorizontal", "singleAxis", "runHorizontal", "runVertical", "refreshScrollbarsHandleLength", "refreshScrollbarsHandleOffset", "refreshScrollbarsScrollbarOffset", "cushion", "setScrollbarElementAnimation", "styleScrollbarPosition", "getTranslateValue", "axisScroll", "axisOverflowAmount", "px", "generateScrollbarDOM", "scrollbarClassName", "track", "handle", "generateHorizontalScrollbarStructure", "generateVerticalScrollbarStructure", "appendElements", "_refreshScrollbarsHandleLength", "_refreshScrollbarsHandleOffset", "_refreshScrollbarsScrollbarOffset", "_scrollbarsAddRemoveClass", "_horizontal", "_scrollbarStructures", "_clone", "_style", "_vertical", "createScrollbarsSetupEvents", "scrollbarHandlePointerInteraction", "Kt", "_documentElm", "refreshScrollbarStructuresHandleOffset", "wheelTimeout", "clearWheelTimeout", "requestHandleTransitionAnimationFrame", "cancelHandleTransitionTimeout", "refreshHandleOffsetTransition", "scrollByFn", "scrollBy", "clientXYKey", "widthHeightKey", "leftTopKey", "whKey", "xyKey", "isAffectingTransition", "propertyName", "createInteractiveScrollEvents", "releasePointerCaptureEvents", "createRelativeHandleMove", "mouseDownScroll", "invertedScale", "deltaMovement", "handleTrackDiff", "scrollDeltaPercent", "scrollDelta", "pointerDownEvent", "isDragScroll", "pointerCaptureElement", "scrollbarOptions", "button", "isPrimary", "pointerType", "continuePointerDown", "instantClickScroll", "shiftKey", "getHandleRect", "getTrackRect", "handleRect", "trackRect", "axisScale", "pointerDownOffset", "handleCenter", "releasePointerCapture", "pointerUpEvent", "pointerId", "pointerMoveEvent", "relativeMovement", "setPointerCapture", "wheelScrollBy", "focusedElement", "focus", "wheelEvent", "deltaX", "deltaY", "deltaMode", "animateHandleOffset", "createScrollbarsSetup", "mouseInHost", "autoHideIsMove", "autoHideIsLeave", "autoHideIsNever", "prevTheme", "instanceAutoHideSuspendScrollDestroyFn", "instanceAutoHideDelay", "isHoverablePointerType", "requestScrollAnimationFrame", "cancelScrollAnimationFrame", "autoHideInstantInteractionTimeout", "clearAutoHideInstantInteractionTimeout", "autoHideSuspendTimeout", "clearAutoHideSuspendTimeout", "auotHideTimeout", "clearAutoHideTimeout", "manageScrollbarsAutoHideInstantInteraction", "Zt", "_scrollEventElement", "Ft", "Bt", "Nt", "jt", "manageScrollbarsAutoHide", "removeAutoHide", "delayless", "hide", "manageAutoHideSuspension", "onHostMouseEnter", "_observersUpdateHints", "_structureUpdateHints", "tn", "_overflowEdgeChanged", "nn", "_overflowAmountChanged", "sn", "_overflowStyleChanged", "Ct", "_t", "k", "en", "_hasOverflow", "themeChanged", "visibilityChanged", "autoHideChanged", "autoHideSuspendChanged", "dragScrollChanged", "clickScrollChanged", "overflowChanged", "trulyAppeared", "updateScrollbars", "updateVisibility", "setScrollbarVisibility", "isVisible", "xVisible", "yVisible", "hasCorner", "createStructureSetupElements", "defaultInitElements", "defaultHostInitialization", "defaultPaddingInitialization", "defaultViewportInitialization", "defaultContentInitialization", "targetIsElm", "targetStructureInitialization", "initElements", "hostInitialization", "paddingInitialization", "viewportInitialization", "contentInitialization", "targetElement", "isTextarea", "ownerDocument", "docElement", "documentElement", "docWnd", "defaultView", "focusElm", "customActiveElm", "generalStaticInitializationElement", "createNewDiv", "generateViewportElement", "generateContentElement", "possibleViewportElement", "viewportIsTarget", "viewportIsTargetBody", "possibleContentElement", "viewportIsContent", "viewportElement", "nonBodyHostElement", "hostElement", "paddingElement", "contentElement", "generatedElements", "elementIsGenerated", "originalNonBodyScrollOffsetElement", "evaluatedTargetObj", "_padding", "_originalScrollOffsetElement", "_windowElm", "viewportAttributeClassName", "cn", "isTextareaHostGenerated", "targetContents", "contentSlot", "initActiveElm", "unwrap", "prepareWrapUnwrapFocus", "stopImmediatePropagation", "tabIndexStr", "ogTabindex", "undoInitWrapUndwrapFocus", "destroyActiveElm", "undoDestroyWrapUndwrapFocus", "createTrinsicUpdateSegment", "_observersState", "xt", "Ot", "createPaddingUpdateSegment", "updatePaddingCache", "currentPaddingCache", "paddingChanged", "ht", "Ht", "paddingAbsoluteChanged", "contentMutation", "paddingStyleChanged", "paddingRelative", "paddingHorizontal", "paddingVertical", "paddingStyle", "viewportStyle", "_paddingAbsolute", "_paddingStyleChanged", "createOverflowUpdateSegment", "ln", "max0", "whCacheOptions", "xyCacheOptions", "getOverflowAmount", "viewportClientSize", "tollerance", "amount", "updateSizeFraction", "getCurrentSizeFraction", "updateViewportScrollSizeCache", "getCurrentViewportScrollSizeCache", "updateOverflowAmountCache", "getCurrentOverflowAmountCache", "updateOverflowEdge", "getCurrentOverflowEdgeCache", "updateOverflowStyleCache", "It", "scrollbarsHidingPluginViewportArrangement", "q", "W", "X", "adjustViewportArrange", "overflowXVisible", "overflowYVisible", "sizeFractionCache", "viewportScrollSizeCache", "overflowAmuntCache", "overflowEdgeCache", "preMeasureViewportOverflowState", "undoViewportArrangeOverflowState", "sizeFractionChanged", "viewportScrollSizeChanged", "arrangedViewportScrollSize", "arrangedViewportClientSize", "windowInnerSize", "overflowAmountScrollSize", "overflowAmountClientSize", "overflowEdge", "overflowEdgeChanged", "overflowAmountChanged", "removeClipping", "adjustViewportStyle", "overflowStyleChanged", "createStructureSetup", "appendStructureElements", "canceled", "updateSegments", "updateInfo", "adjustScrollOffset", "updateSegment", "createSetups", "onUpdated", "structureSetupCreate", "structureSetupUpdate", "structureSetupCanceled", "observersSetupCreate", "observersSetupUpdate", "observersUpdateHints", "scrollbarsSetupCreate", "scrollbarsSetupUpdate", "scrollbarsSetupElements", "updateHintsAreTruthy", "hints", "some", "observerUpdateHints", "_changedOptions", "rawChangedOptions", "rawForce", "At", "_n", "_cloneScrollbar", "baseUpdateInfoObj", "observersHints", "structureHints", "truthyObserversHints", "truthyStructureHints", "rn", "initialScroll", "_observersSetupState", "_structureSetupState", "_structureSetupElements", "_scrollbarsSetupElements", "OverlayScrollbars", "eventListeners", "nt", "targetIsElement", "instanceTarget", "potentialInstance", "instancePluginModuleInstances", "validateOptions", "newOptionsWithoutUndefined", "pluginValidate", "currentOptions", "addPluginEvent", "removePluginEvents", "triggerPluginEvent", "addInstanceEvent", "removeInstanceEvents", "triggerInstanceEvent", "setupsConstruct", "setupsUpdate", "setupsState", "setupsElements", "setupsCanceled", "zt", "sizeChanged", "directionChanged", "hostMutation", "pure", "base", "on", "off", "vn", "hn", "un", "qt", "Jt", "translateScrollbarStructure", "translateScrollbarsSetupElement", "scrollbarsSetupElement", "Wt", "Xt", "translatedStructure", "scrollOffsetElement", "scrollEventElement", "scrollbarHorizontal", "scrollbarVertical", "plugins", "isArr", "pluginsToAdd", "valid", "hasElmsFn", "J", "st", "et", "tt", "ot", "scrollbarsSize", "scrollbarsOverlaid", "scrollbarsHiding", "scrollTimeline", "setDefaultInitialization", "setDefaultOptions", "createDefer", "noop", "idleId", "rafId", "wnd", "idleSupported", "rAF", "cAF", "rIdle", "cIdle", "clear", "callback", "options", "useOverlayScrollbars", "params", "instance", "events", "defer", "paramsRef", "shallowRef", "requestDefer", "clearDefer", "watch", "unref", "_a", "currDefer", "currOptions", "OverlayScrollbars", "currEvents", "onUnmounted", "target", "init", "P", "emitEvents", "element", "toRefs", "props", "elementRef", "slotRef", "combinedEvents", "ref", "initialize", "osInstance", "expose", "watchPostEffect", "onCleanup", "contentsElm", "rawCurrEvents", "obj", "name", "eventListener", "args", "emits", "c", "i", "r"]
}
