{
  "version": 3,
  "sources": ["../../node_modules/filesize/dist/filesize.esm.js"],
  "sourcesContent": ["/**\n * filesize\n *\n * @copyright 2024 Jason Mulligan <jason.mulligan@avoidwork.com>\n * @license BSD-3-Clause\n * @version 10.1.1\n */\nconst ARRAY = \"array\";\r\nconst BIT = \"bit\";\r\nconst BITS = \"bits\";\r\nconst BYTE = \"byte\";\r\nconst BYTES = \"bytes\";\r\nconst EMPTY = \"\";\r\nconst EXPONENT = \"exponent\";\r\nconst FUNCTION = \"function\";\r\nconst IEC = \"iec\";\r\nconst INVALID_NUMBER = \"Invalid number\";\r\nconst INVALID_ROUND = \"Invalid rounding method\";\r\nconst JEDEC = \"jedec\";\r\nconst OBJECT = \"object\";\r\nconst PERIOD = \".\";\r\nconst ROUND = \"round\";\r\nconst S = \"s\";\r\nconst SI = \"si\";\r\nconst SI_KBIT = \"kbit\";\r\nconst SI_KBYTE = \"kB\";\r\nconst SPACE = \" \";\r\nconst STRING = \"string\";\r\nconst ZERO = \"0\";\r\nconst STRINGS = {\r\n\tsymbol: {\r\n\t\tiec: {\r\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\r\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\r\n\t\t},\r\n\t\tjedec: {\r\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\r\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\t\t}\r\n\t},\r\n\tfullform: {\r\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\r\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\r\n\t}\r\n};function filesize (arg, {\r\n\tbits = false,\r\n\tpad = false,\r\n\tbase = -1,\r\n\tround = 2,\r\n\tlocale = EMPTY,\r\n\tlocaleOptions = {},\r\n\tseparator = EMPTY,\r\n\tspacer = SPACE,\r\n\tsymbols = {},\r\n\tstandard = EMPTY,\r\n\toutput = STRING,\r\n\tfullform = false,\r\n\tfullforms = [],\r\n\texponent = -1,\r\n\troundingMethod = ROUND,\r\n\tprecision = 0\r\n} = {}) {\r\n\tlet e = exponent,\r\n\t\tnum = Number(arg),\r\n\t\tresult = [],\r\n\t\tval = 0,\r\n\t\tu = EMPTY;\r\n\r\n\t// Sync base & standard\r\n\tif (standard === SI) {\r\n\t\tbase = 10;\r\n\t\tstandard = JEDEC;\r\n\t} else if (standard === IEC || standard === JEDEC) {\r\n\t\tbase = 2;\r\n\t} else if (base === 2) {\r\n\t\tstandard = IEC;\r\n\t} else {\r\n\t\tbase = 10;\r\n\t\tstandard = JEDEC;\r\n\t}\r\n\r\n\tconst ceil = base === 10 ? 1000 : 1024,\r\n\t\tfull = fullform === true,\r\n\t\tneg = num < 0,\r\n\t\troundingFunc = Math[roundingMethod];\r\n\r\n\tif (typeof arg !== \"bigint\" && isNaN(arg)) {\r\n\t\tthrow new TypeError(INVALID_NUMBER);\r\n\t}\r\n\r\n\tif (typeof roundingFunc !== FUNCTION) {\r\n\t\tthrow new TypeError(INVALID_ROUND);\r\n\t}\r\n\r\n\t// Flipping a negative number to determine the size\r\n\tif (neg) {\r\n\t\tnum = -num;\r\n\t}\r\n\r\n\t// Determining the exponent\r\n\tif (e === -1 || isNaN(e)) {\r\n\t\te = Math.floor(Math.log(num) / Math.log(ceil));\r\n\r\n\t\tif (e < 0) {\r\n\t\t\te = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t// Exceeding supported length, time to reduce & multiply\r\n\tif (e > 8) {\r\n\t\tif (precision > 0) {\r\n\t\t\tprecision += 8 - e;\r\n\t\t}\r\n\r\n\t\te = 8;\r\n\t}\r\n\r\n\tif (output === EXPONENT) {\r\n\t\treturn e;\r\n\t}\r\n\r\n\t// Zero is now a special case because bytes divide by 1\r\n\tif (num === 0) {\r\n\t\tresult[0] = 0;\r\n\t\tu = result[1] = STRINGS.symbol[standard][bits ? BITS : BYTES][e];\r\n\t} else {\r\n\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\r\n\r\n\t\tif (bits) {\r\n\t\t\tval = val * 8;\r\n\r\n\t\t\tif (val >= ceil && e < 8) {\r\n\t\t\t\tval = val / ceil;\r\n\t\t\t\te++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst p = Math.pow(10, e > 0 ? round : 0);\r\n\t\tresult[0] = roundingFunc(val * p) / p;\r\n\r\n\t\tif (result[0] === ceil && e < 8 && exponent === -1) {\r\n\t\t\tresult[0] = 1;\r\n\t\t\te++;\r\n\t\t}\r\n\r\n\t\tu = result[1] = base === 10 && e === 1 ? bits ? SI_KBIT : SI_KBYTE : STRINGS.symbol[standard][bits ? BITS : BYTES][e];\r\n\t}\r\n\r\n\t// Decorating a 'diff'\r\n\tif (neg) {\r\n\t\tresult[0] = -result[0];\r\n\t}\r\n\r\n\t// Setting optional precision\r\n\tif (precision > 0) {\r\n\t\tresult[0] = result[0].toPrecision(precision);\r\n\t}\r\n\r\n\t// Applying custom symbol\r\n\tresult[1] = symbols[result[1]] || result[1];\r\n\r\n\tif (locale === true) {\r\n\t\tresult[0] = result[0].toLocaleString();\r\n\t} else if (locale.length > 0) {\r\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\r\n\t} else if (separator.length > 0) {\r\n\t\tresult[0] = result[0].toString().replace(PERIOD, separator);\r\n\t}\r\n\r\n\tif (pad && Number.isInteger(result[0]) === false && round > 0) {\r\n\t\tconst x = separator || PERIOD,\r\n\t\t\ttmp = result[0].toString().split(x),\r\n\t\t\ts = tmp[1] || EMPTY,\r\n\t\t\tl = s.length,\r\n\t\t\tn = round - l;\r\n\r\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;\r\n\t}\r\n\r\n\tif (full) {\r\n\t\tresult[1] = fullforms[e] ? fullforms[e] : STRINGS.fullform[standard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);\r\n\t}\r\n\r\n\t// Returning Array, Object, or String (default)\r\n\treturn output === ARRAY ? result : output === OBJECT ? {\r\n\t\tvalue: result[0],\r\n\t\tsymbol: result[1],\r\n\t\texponent: e,\r\n\t\tunit: u\r\n\t} : result.join(spacer);\r\n}\r\n\r\n// Partial application for functional programming\r\nfunction partial ({\r\n\tbits = false,\r\n\tpad = false,\r\n\tbase = -1,\r\n\tround = 2,\r\n\tlocale = EMPTY,\r\n\tlocaleOptions = {},\r\n\tseparator = EMPTY,\r\n\tspacer = SPACE,\r\n\tsymbols = {},\r\n\tstandard = EMPTY,\r\n\toutput = STRING,\r\n\tfullform = false,\r\n\tfullforms = [],\r\n\texponent = -1,\r\n\troundingMethod = ROUND,\r\n\tprecision = 0\r\n} = {}) {\r\n\treturn arg => filesize(arg, {\r\n\t\tbits,\r\n\t\tpad,\r\n\t\tbase,\r\n\t\tround,\r\n\t\tlocale,\r\n\t\tlocaleOptions,\r\n\t\tseparator,\r\n\t\tspacer,\r\n\t\tsymbols,\r\n\t\tstandard,\r\n\t\toutput,\r\n\t\tfullform,\r\n\t\tfullforms,\r\n\t\texponent,\r\n\t\troundingMethod,\r\n\t\tprecision\r\n\t});\r\n}export{filesize,partial};"],
  "mappings": "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",
  "names": []
}
